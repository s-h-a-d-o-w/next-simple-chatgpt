import { existsSync, readdirSync, readFileSync, writeFileSync } from "node:fs";
import { join, resolve } from "node:path";

type LanguageAlias = {
  file: string;
  aliases: string[];
};

function getAvailableLanguages() {
  try {
    const langDir = join(resolve("node_modules/refractor"), "lang");
    const modules = readdirSync(langDir).filter((file) => file.endsWith(".js"));

    const aliases: LanguageAlias[] = modules
      .map((file) => {
        const content = readFileSync(join(langDir, file), "utf-8");
        const match = content.match(/\.aliases\s*=\s*(\[(?:'|").+?(?:'|")\])/s);
        return match && match[1]
          ? {
              file: file.replace(".js", ""),
              aliases: JSON.parse(match[1].replaceAll("'", '"')),
            }
          : undefined;
      })
      .filter((alias) => alias !== undefined);

    const languages = modules
      .map((file) => file.replace(".js", ""))
      .filter((lang) => lang !== "index")
      .sort();

    return [languages, aliases] as const;
  } catch (error) {
    console.error("Error reading language directory:", error);
    return [];
  }
}

function generateLanguageLoader(
  languages: string[],
  aliases: LanguageAlias[],
): string {
  const imports = languages
    .map((lang) => `  "${lang}": () => import("refractor/${lang}"),`)
    .join("\n");

  const aliasImports = aliases
    .map(({ file, aliases }) =>
      aliases
        .map((alias) => `  "${alias}": () => import("refractor/${file}"),`)
        .join("\n"),
    )
    .join("\n");

  return `/* eslint-disable prettier/prettier */
// This file is auto-generated by scripts/generateRefractorLanguageImports.ts
// Do not edit manually - delete this file and run 'pnpm generate:refractor-languages' to regenerate

export const languageLoaders = {
${imports}

// Aliases
${aliasImports}
} as const;

export type SupportedLanguage = keyof typeof languageLoaders;

export function isSupportedLanguage(language: string): language is SupportedLanguage {
  return language in languageLoaders;
}
`;
}

function main() {
  try {
    if (existsSync("src/app/components/Message/Code/refractorLanguages.ts")) {
      console.log("🔍 Syntax highlighting languages already generated");
      return;
    }

    console.log("🔍 Scanning for available syntax highlighting languages...");
    const [languages, aliases] = getAvailableLanguages();
    console.log(
      `📝 Found ${languages.length} languages and ${aliases.length} aliases`,
    );

    console.log("🏗️  Generating language loader...");
    writeFileSync(
      "src/app/components/Message/Code/refractorLanguages.ts",
      generateLanguageLoader(languages, aliases),
    );

    console.log(`✅ Done`);
  } catch (error) {
    console.error("❌ Error generating syntax highlighting languages:", error);
    process.exit(1);
  }
}

main();
