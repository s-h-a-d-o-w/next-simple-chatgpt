import { existsSync, readdirSync, writeFileSync } from "node:fs";
import { join, resolve } from "node:path";

function getAvailableLanguages(): string[] {
  try {
    return readdirSync(join(resolve("node_modules/refractor"), "lang"))
      .filter((file) => file.endsWith(".js"))
      .map((file) => file.replace(".js", ""))
      .filter((lang) => lang !== "index")
      .sort();
  } catch (error) {
    console.error("Error reading language directory:", error);
    return [];
  }
}

function generateLanguageLoader(languages: string[]): string {
  const imports = languages
    .map((lang) => `  "${lang}": () => import("refractor/${lang}"),`)
    .join("\n");

  return `/* eslint-disable prettier/prettier */
// This file is auto-generated by scripts/generateRefractorLanguageImports.ts
// Do not edit manually - run 'pnpm generate:refractor-languages' to regenerate

export const languageLoaders = {
${imports}
} as const;

export type SupportedLanguage = keyof typeof languageLoaders;

export function isSupportedLanguage(language: string): language is SupportedLanguage {
  return language in languageLoaders;
}
`;
}

function main() {
  try {
    if (existsSync("src/app/components/Message/Code/refractorLanguages.ts")) {
      console.log("🔍 Syntax highlighting languages already generated");
      return;
    }

    console.log("🔍 Scanning for available syntax highlighting languages...");
    const languages = getAvailableLanguages();
    console.log(`📝 Found ${languages.length} languages`);

    console.log("🏗️  Generating language loader...");
    writeFileSync(
      "src/app/components/Message/Code/refractorLanguages.ts",
      generateLanguageLoader(languages),
    );

    console.log(`📊 Total languages supported: ${languages.length}`);
  } catch (error) {
    console.error("❌ Error generating syntax highlighting languages:", error);
    process.exit(1);
  }
}

main();
